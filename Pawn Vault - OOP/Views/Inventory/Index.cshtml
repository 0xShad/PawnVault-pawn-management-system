@model IEnumerable<Pawn_Vault___OOP.Models.InventoryItem>
@{
    ViewData["Title"] = "Inventory Management";
}

<div class="px-6 py-4 min-h-screen">
    <div class="flex items-center justify-between mb-1">
        <h1 class="text-3xl font-bold text-gray-900">Inventory</h1>
        @if (User.IsInRole("Admin")) {
            <a asp-action="Create" class="flex items-center gap-2 bg-[#0a1629] hover:bg-[#003366] text-white font-semibold px-5 py-2 rounded-lg shadow transition">
                <span class="text-xl leading-none">+</span> Add Item
            </a>
        }
    </div>
    <p class="text-gray-500 mb-8">Manage your vault items and their status.</p>

    <!-- Summary Cards -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div class="bg-white rounded-xl shadow p-6 flex flex-col justify-between">
            <span class="text-gray-500">Total Items</span>
            <span class="text-2xl font-bold text-gray-900 mt-2">@Model.Count()</span>
        </div>
        <div class="bg-white rounded-xl shadow p-6 flex flex-col justify-between">
            <span class="text-gray-500">On Loan</span>
            <span class="text-2xl font-bold text-gray-900 mt-2">@Model.Count(i => i.Status == "on loan")</span>
        </div>
        <div class="bg-white rounded-xl shadow p-6 flex flex-col justify-between">
            <span class="text-gray-500">Total Value</span>
            <span class="text-2xl font-bold text-gray-900 mt-2">$@Model.Sum(i => i.EstimatedValue).ToString("N2")</span>
        </div>
    </div>
  <!-- Search, Sort, and Filter Inventory -->
    <form method="get" class="bg-white rounded-xl shadow p-6 mb-8 flex flex-col md:flex-row md:items-end gap-4" id="inventorySearchForm">
        <div class="flex-1 relative">
            <input type="text" name="search" value="@ViewBag.Search" placeholder="Search inventory..." class="w-full border border-gray-300 rounded-lg py-2 pl-10 pr-4 focus:outline-none focus:ring-2 focus:ring-[#003366] focus:border-[#003366]" id="inventorySearchInput" autocomplete="off" />
            <svg class="absolute left-3 top-2.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><circle cx="11" cy="11" r="8" /><path d="M21 21l-4.35-4.35" /></svg>
        </div>
        <div>
            <label class="block text-xs text-gray-500 mb-1" for="sort">Sort</label>
            <select name="sort" id="sort" class="border border-gray-300 rounded-lg py-2 px-4 focus:outline-none focus:ring-2 focus:ring-[#003366] focus:border-[#003366]">
                @{
                    var sortVal = (ViewBag.Sort as string ?? "az").ToLower();
                }
                <option value="az" selected="@(sortVal == "az" ? "selected" : null)">A - Z</option>
                <option value="za" selected="@(sortVal == "za" ? "selected" : null)">Z - A</option>
            </select>
        </div>
        <div>
            <label class="block text-xs text-gray-500 mb-1" for="status">Status</label>
            <select name="status" id="status" class="border border-gray-300 rounded-lg py-2 px-4 focus:outline-none focus:ring-2 focus:ring-[#003366] focus:border-[#003366]">
                @{
                    var statusVal = (ViewBag.Status as string ?? "");
                }
                <option value="" selected="@(string.IsNullOrEmpty(statusVal) ? "selected" : null)">All Status</option>
                <option value="available" selected="@(statusVal == "available" ? "selected" : null)">Available</option>
                <option value="on loan" selected="@(statusVal == "on loan" ? "selected" : null)">On Loan</option>
                <option value="sold" selected="@(statusVal == "sold" ? "selected" : null)">Sold</option>
            </select>
        </div>
        <div>
            <label class="block text-xs text-gray-500 mb-1" for="source">Source</label>
            <select name="source" id="source" class="border border-gray-300 rounded-lg py-2 px-4 focus:outline-none focus:ring-2 focus:ring-[#003366] focus:border-[#003366]">
                @{
                    var sourceVal = (ViewBag.Source as string ?? "");
                }
                <option value="" selected="@(string.IsNullOrEmpty(sourceVal) ? "selected" : null)">All</option>
                <option value="loan" selected="@(sourceVal == "loan" ? "selected" : null)">From Loan</option>
                <option value="admin" selected="@(sourceVal == "admin" ? "selected" : null)">System/Admin</option>
            </select>
        </div>
        <div>
            <label class="block text-xs text-gray-500 mb-1" for="category">Category</label>
            <select name="category" id="category" class="border border-gray-300 rounded-lg py-2 px-4 focus:outline-none focus:ring-2 focus:ring-[#003366] focus:border-[#003366]">
                <option value="" selected="@(string.IsNullOrEmpty(ViewBag.Category as string) ? "selected" : null)">All</option>
                @foreach (var cat in (IEnumerable<string>)ViewBag.AllCategories)
                {
                    <option value="@cat" selected="@(ViewBag.Category == cat ? "selected" : null)">@cat</option>
                }
            </select>
        </div>
        <div>
            <label class="block text-xs text-gray-500 mb-1" for="condition">Condition</label>
            <select name="condition" id="condition" class="border border-gray-300 rounded-lg py-2 px-4 focus:outline-none focus:ring-2 focus:ring-[#003366] focus:border-[#003366]">
                <option value="" selected="@(string.IsNullOrEmpty(ViewBag.Condition as string) ? "selected" : null)">All</option>
                @foreach (var cond in (IEnumerable<string>)ViewBag.AllConditions)
                {
                    <option value="@cond" selected="@(ViewBag.Condition == cond ? "selected" : null)">@cond</option>
                }
            </select>
        </div>
    </form>

    <!-- Inventory Table -->
    <div class="bg-white rounded-xl shadow p-6">
       
    
        <div class="mb-4">
            <h2 class="text-xl font-semibold text-gray-900">Inventory Items</h2>
            <p class="text-gray-500">@Model.Count() items found</p>
        </div>
        <div>
            <table class="min-w-full divide-y divide-gray-200">
                <thead>
                    <tr>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Item</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Category</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Condition</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Estimated Value</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Loan Amount</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Date Added</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-100">
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td class="px-4 py-3">
                                <div class="font-semibold text-gray-900">@item.Name
                                    @if (item.LoanID != null)
                                    {
                                        <span class="ml-2 px-2 py-0.5 rounded-full bg-blue-100 text-blue-700 text-xs font-semibold">From Loan</span>
                                    }
                                    else
                                    {
                                        <span class="ml-2 px-2 py-0.5 rounded-full bg-yellow-100 text-yellow-700 text-xs font-semibold">System/Admin</span>
                                    }
                                </div>
                                <div class="text-xs text-gray-500">@item.Description</div>
                            </td>
                            <td class="px-4 py-3">@item.Category</td>
                            <td class="px-4 py-3">
                                <span class="inline-block px-2 py-1 text-xs rounded-full 
                                    @(item.Condition.ToLower() switch {
                                        "excellent" => "bg-green-100 text-green-700",
                                        "good" => "bg-blue-100 text-blue-700",
                                        "fair" => "bg-yellow-100 text-yellow-700",
                                        "poor" => "bg-red-100 text-red-700",
                                        _ => "bg-gray-100 text-gray-700"
                                    })">@item.Condition</span>
                            </td>
                            <td class="px-4 py-3">$@item.EstimatedValue.ToString("N2")</td>
                            <td class="px-4 py-3">$@item.LoanAmount.ToString("N2")</td>
                            <td class="px-4 py-3">
                                <span class="inline-block px-2 py-1 text-xs rounded-full 
                                    @(item.Status.ToLower() switch {
                                        "available" => "bg-green-100 text-green-700",
                                        "on loan" => "bg-blue-100 text-blue-700",
                                        "sold" => "bg-gray-200 text-gray-700",
                                        _ => "bg-gray-100 text-gray-700"
                                    })">@item.Status</span>
                            </td>
                            <td class="px-4 py-3">@item.DateAdded.ToString("MMMM dd, yyyy")</td>
                            <td class="px-4 py-3 text-center relative">
                                <button class="text-gray-700 hover:text-gray-900 focus:outline-none" onclick="toggleMenu('menu-@item.Id')">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                <div id="menu-@item.Id" class="hidden absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg py-2 z-50">
                                    <a asp-action="View" asp-route-id="@item.Id" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 text-left">
                                        <i class="fas fa-eye mr-2"></i>View
                                    </a>
                                    @if (User.IsInRole("Admin"))
                                    {
                                        <a asp-action="Edit" asp-route-id="@item.Id" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 text-left">
                                            <i class="fas fa-edit mr-2"></i>Edit
                                        </a>
                                        <button onclick="deleteItem(@item.Id)" class="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100">
                                            <i class="fas fa-trash-alt mr-2"></i>Delete
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="flex justify-between items-center mt-6">
            <div class="text-sm text-gray-500">Page @(ViewBag.Page ?? 1) of @(ViewBag.TotalPages ?? 1)</div>
            <div class="flex gap-2">
                <a asp-action="Index"
                   asp-route-search="@ViewBag.Search"
                   asp-route-sort="@ViewBag.Sort"
                   asp-route-status="@ViewBag.Status"
                   asp-route-source="@ViewBag.Source"
                   asp-route-category="@ViewBag.Category"
                   asp-route-condition="@ViewBag.Condition"
                   asp-route-page="@((ViewBag.Page ?? 1) - 1)"
                   class="px-3 py-1 rounded-lg border text-gray-700 hover:bg-gray-100 @((ViewBag.Page <= 1) ? "pointer-events-none opacity-50" : "")">Previous</a>
                <a asp-action="Index"
                   asp-route-search="@ViewBag.Search"
                   asp-route-sort="@ViewBag.Sort"
                   asp-route-status="@ViewBag.Status"
                   asp-route-source="@ViewBag.Source"
                   asp-route-category="@ViewBag.Category"
                   asp-route-condition="@ViewBag.Condition"
                   asp-route-page="@((ViewBag.Page ?? 1) + 1)"
                   class="px-3 py-1 rounded-lg border text-gray-700 hover:bg-gray-100 @((ViewBag.Page >= ViewBag.TotalPages) ? "pointer-events-none opacity-50" : "")">Next</a>
            </div>
        </div>
    </div>
</div>

@{
    ViewData["Message"] = "Are you sure you want to delete this item? This action cannot be undone.";
    ViewData["DeleteUrl"] = "/Inventory/Delete/";
}
@await Html.PartialAsync("_DeleteModal")

@section Scripts {
    <script>
        function toggleMenu(menuId) {
            const menu = document.getElementById(menuId);
            const allMenus = document.querySelectorAll('[id^="menu-"]');
            
            // Close all other menus
            allMenus.forEach(m => {
                if (m.id !== menuId) {
                    m.classList.add('hidden');
                }
            });
            
            // Toggle the clicked menu
            menu.classList.toggle('hidden');
        }

        // Close menus when clicking outside
        document.addEventListener('click', function(event) {
            const menus = document.querySelectorAll('[id^="menu-"]');
            const isClickInsideMenu = Array.from(menus).some(menu => menu.contains(event.target));
            const isClickOnButton = event.target.closest('button');
            
            if (!isClickInsideMenu && !isClickOnButton) {
                menus.forEach(menu => menu.classList.add('hidden'));
            }
        });

        function deleteItem(itemId) {
            const deleteUrl = `/Inventory/Delete/${itemId}`;
            document.querySelector('#deleteModal button[onclick^="confirmDelete"]').setAttribute('onclick', `confirmDelete('${deleteUrl}')`);
            showDeleteModal('deleteModal');
        }

        // Debounced auto-submit for search
        let searchTimeout;
        const searchInput = document.getElementById('inventorySearchInput');
        if (searchInput) {
            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(function() {
                    document.getElementById('inventorySearchForm').submit();
                }, 700); // 700ms debounce
            });
        }

        // Auto-submit on filter change
        document.getElementById('sort').addEventListener('change', function() {
            document.getElementById('inventorySearchForm').submit();
        });
        document.getElementById('status').addEventListener('change', function() {
            document.getElementById('inventorySearchForm').submit();
        });
        document.getElementById('source').addEventListener('change', function() {
            document.getElementById('inventorySearchForm').submit();
        });
        document.getElementById('category').addEventListener('change', function() {
            document.getElementById('inventorySearchForm').submit();
        });
        document.getElementById('condition').addEventListener('change', function() {
            document.getElementById('inventorySearchForm').submit();
        });
    </script>
}