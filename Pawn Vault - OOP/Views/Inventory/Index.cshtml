@model IEnumerable<Pawn_Vault___OOP.Models.InventoryItem>

<div class="px-6 py-4 min-h-screen">
    <div class="flex items-center justify-between mb-1">
        <h1 class="text-3xl font-bold text-gray-900">Inventory</h1>
        @if (User.IsInRole("Admin")) {
            <a asp-action="Create" class="flex items-center gap-2 bg-[#0a1629] hover:bg-[#003366] text-white font-semibold px-5 py-2 rounded-lg shadow transition">
                <span class="text-xl leading-none">+</span> Add Item
            </a>
        }
    </div>
    <p class="text-gray-500 mb-8">Manage your vault items and their status.</p>

    <!-- Summary Cards -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div class="bg-white rounded-xl shadow p-6 flex flex-col justify-between">
            <span class="text-gray-500">Total Items</span>
            <span class="text-2xl font-bold text-gray-900 mt-2">@Model.Count()</span>
        </div>
        <div class="bg-white rounded-xl shadow p-6 flex flex-col justify-between">
            <span class="text-gray-500">On Loan</span>
            <span class="text-2xl font-bold text-gray-900 mt-2">@Model.Count(i => i.Status == "on loan")</span>
        </div>
        <div class="bg-white rounded-xl shadow p-6 flex flex-col justify-between">
            <span class="text-gray-500">Total Value</span>
            <span class="text-2xl font-bold text-gray-900 mt-2">$@Model.Sum(i => i.EstimatedValue).ToString("N2")</span>
        </div>
    </div>

    <!-- Search Inventory -->
    <div class="bg-white rounded-xl shadow p-6 mb-8">
        <h2 class="text-xl font-semibold text-gray-900 mb-1">Search Inventory</h2>
        <p class="text-gray-500 mb-4">Find items by name, category, or description</p>
        <div class="relative">
            <input type="text" placeholder="Search inventory..." class="w-full border border-gray-300 rounded-lg py-2 pl-10 pr-4 focus:outline-none focus:ring-2 focus:ring-[#003366] focus:border-[#003366]" />
            <svg class="absolute left-3 top-2.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><circle cx="11" cy="11" r="8" /><path d="M21 21l-4.35-4.35" /></svg>
        </div>
    </div>

    <!-- Inventory Table -->
    <div class="bg-white rounded-xl shadow p-6">
        <div class="mb-4">
            <h2 class="text-xl font-semibold text-gray-900">Inventory Items</h2>
            <p class="text-gray-500">@Model.Count() items found</p>
        </div>
        <!-- Filters -->
        <div class="flex justify-end mb-4">
            <button class="p-2 rounded-lg bg-gray-100 hover:bg-gray-200 text-[#003366]" title="Filter">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2a1 1 0 01-.293.707l-6.414 6.414A1 1 0 0013 13.414V19a1 1 0 01-1.447.894l-2-1A1 1 0 019 18v-4.586a1 1 0 00-.293-.707L2.293 6.707A1 1 0 012 6V4z" />
                </svg>
            </button>
        </div>
        <div>
            <table class="min-w-full divide-y divide-gray-200">
                <thead>
                    <tr>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Item</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Category</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Condition</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Estimated Value</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Loan Amount</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Date Added</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-100">
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td class="px-4 py-3">
                                <div class="font-semibold text-gray-900">@item.Name</div>
                                <div class="text-xs text-gray-500">@item.Description</div>
                            </td>
                            <td class="px-4 py-3">@item.Category</td>
                            <td class="px-4 py-3">
                                <span class="inline-block px-2 py-1 text-xs rounded-full 
                                    @(item.Condition.ToLower() switch {
                                        "excellent" => "bg-green-100 text-green-700",
                                        "good" => "bg-blue-100 text-blue-700",
                                        "fair" => "bg-yellow-100 text-yellow-700",
                                        "poor" => "bg-red-100 text-red-700",
                                        _ => "bg-gray-100 text-gray-700"
                                    })">@item.Condition</span>
                            </td>
                            <td class="px-4 py-3">$@item.EstimatedValue.ToString("N2")</td>
                            <td class="px-4 py-3">$@item.LoanAmount.ToString("N2")</td>
                            <td class="px-4 py-3">
                                <span class="inline-block px-2 py-1 text-xs rounded-full 
                                    @(item.Status.ToLower() switch {
                                        "available" => "bg-green-100 text-green-700",
                                        "on loan" => "bg-blue-100 text-blue-700",
                                        "sold" => "bg-gray-200 text-gray-700",
                                        _ => "bg-gray-100 text-gray-700"
                                    })">@item.Status</span>
                            </td>
                            <td class="px-4 py-3">@item.DateAdded.ToString("yyyy-MM-dd")</td>
                            <td class="px-4 py-3 relative">
                                <div class="inline-block text-left">
                                    <button type="button" class="inline-flex justify-center w-8 h-8 rounded-full bg-gray-100 hover:bg-gray-200 focus:outline-none" id="menu-button-@item.Id" aria-expanded="true" aria-haspopup="true">
                                        <svg class="w-5 h-5 text-[#003366]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><circle cx="12" cy="12" r="1.5"/><circle cx="19" cy="12" r="1.5"/><circle cx="5" cy="12" r="1.5"/></svg>
                                    </button>
                                    <div class="hidden absolute right-0 z-10 mt-2 w-32 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none" role="menu" aria-orientation="vertical" aria-labelledby="menu-button-@item.Id" tabindex="-1">
                                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" role="menuitem" tabindex="-1">View</a>
                                        <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100" role="menuitem" tabindex="-1">Edit</a>
                                        <a href="#" class="block px-4 py-2 text-sm text-red-600 hover:bg-red-50" role="menuitem" tabindex="-1">Delete</a>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@{
    ViewData["Title"] = "Delete Item";
    ViewData["Message"] = "Are you sure you want to delete this item? This action cannot be undone.";
    ViewData["DeleteUrl"] = "/Inventory/Delete/";
}
@await Html.PartialAsync("_DeleteModal")

@section Scripts {
    <script>
        function toggleMenu(menuId) {
            const menu = document.getElementById(menuId);
            const allMenus = document.querySelectorAll('[id^="menu-"]');
            
            // Close all other menus
            allMenus.forEach(m => {
                if (m.id !== menuId) {
                    m.classList.add('hidden');
                }
            });
            
            // Toggle the clicked menu
            menu.classList.toggle('hidden');
        }

        // Close menus when clicking outside
        document.addEventListener('click', function(event) {
            const menus = document.querySelectorAll('[id^="menu-"]');
            const isClickInsideMenu = Array.from(menus).some(menu => menu.contains(event.target));
            const isClickOnButton = event.target.closest('button');
            
            if (!isClickInsideMenu && !isClickOnButton) {
                menus.forEach(menu => menu.classList.add('hidden'));
            }
        });

        function deleteItem(itemId) {
            const deleteUrl = `/Inventory/Delete/${itemId}`;
            document.querySelector('#deleteModal button[onclick^="confirmDelete"]').setAttribute('onclick', `confirmDelete('${deleteUrl}')`);
            showDeleteModal('deleteModal');
        }
    </script>
}