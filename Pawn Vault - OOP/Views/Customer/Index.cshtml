@model List<Pawn_Vault___OOP.Models.Customer>

@{
    var search = ViewBag.Search as string ?? "";
    var sort = ViewBag.Sort as string ?? "az";
    var page = (int)(ViewBag.Page ?? 1);
    var totalPages = (int)(ViewBag.TotalPages ?? 1);
    var total = (int)(ViewBag.Total ?? 0);
    var azSelected = sort == "az" ? "selected" : "";
    var zaSelected = sort == "za" ? "selected" : "";
    ViewData["Title"] = "Customers";
}

<div class="px-6 py-4 min-h-screen">
    <div class="flex items-center justify-between mb-1">
        <h1 class="text-3xl font-bold text-gray-900">Customers</h1>
        <a asp-action="Create" class="flex items-center gap-2 bg-black hover:bg-gray-800 text-white font-semibold px-5 py-2 rounded-lg shadow transition">
            <span class="text-xl leading-none">+</span> Register Customer
        </a>
    </div>
    <p class="text-gray-500 mb-8">Manage your customer profiles and their loan status.</p>

    <!-- Summary Cards -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div class="bg-white rounded-xl shadow p-6 flex flex-col justify-between">
            <span class="text-gray-500">Total Customers</span>
            <span class="text-2xl font-bold text-gray-900 mt-2">@total</span>
        </div>
        <div class="bg-white rounded-xl shadow p-6 flex flex-col justify-between">
            <span class="text-gray-500">With Active Loans</span>
            <span class="text-2xl font-bold text-gray-900 mt-2">@Model.Count(c => c.Loans.Any(l => l.Status == "Active"))</span>
        </div>
        <div class="bg-white rounded-xl shadow p-6 flex flex-col justify-between">
            <span class="text-gray-500">Total Loans</span>
            <span class="text-2xl font-bold text-gray-900 mt-2">@Model.Sum(c => c.Loans.Count)</span>
        </div>
    </div>

    <!-- Search and Sort Customers -->
    <form method="get" class="bg-white rounded-xl shadow p-6 mb-8 flex flex-col md:flex-row md:items-end gap-4" id="customerSearchForm">
        <div class="flex-1 relative">
            <input type="text" name="search" value="@search" placeholder="Search customers..." class="w-full border border-gray-300 rounded-lg py-2 pl-10 pr-4 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500" id="customerSearchInput" autocomplete="off" />
            <svg class="absolute left-3 top-2.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><circle cx="11" cy="11" r="8" /><path d="M21 21l-4.35-4.35" /></svg>
        </div>
        <div>
            <label class="block text-xs text-gray-500 mb-1" for="sort">Sort</label>
            <select name="sort" id="sort" class="border border-gray-300 rounded-lg py-2 px-4 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500">
                @if (sort == "az")
                {
                    <option value="az" selected>A - Z</option>
                    <option value="za">Z - A</option>
                }
                else
                {
                    <option value="az">A - Z</option>
                    <option value="za" selected>Z - A</option>
                }
            </select>
        </div>
        <div>
            <label class="block text-xs text-gray-500 mb-1" for="status">Status</label>
            <select name="status" id="status" class="border border-gray-300 rounded-lg py-2 px-4 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500">
                @{
                    var statusVal = (ViewBag.Status as string ?? "");
                }
                <option value="" selected="@(string.IsNullOrEmpty(statusVal) ? "selected" : null)">All Status</option>
                <option value="Active" selected="@(statusVal == "Active" ? "selected" : null)">Active</option>
                <option value="NoLoans" selected="@(statusVal == "NoLoans" ? "selected" : null)">No Loans</option>
            </select>
        </div>
    </form>

    <!-- Customer Table -->
    <div class="bg-white rounded-xl shadow p-6">
        <div class="mb-4">
            <h2 class="text-xl font-semibold text-gray-900">Customer List</h2>
            <p class="text-gray-500">@total customers found</p>
        </div>
        <div>
            <table class="min-w-full divide-y divide-gray-200">
                <thead>
                    <tr>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Name</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Phone</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Date Added</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Total Loans</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-100">
                    @foreach (var customer in Model)
                    {
                        <tr>
                            <td class="px-4 py-3 font-semibold text-gray-900">@customer.CustomerFN @customer.CustomerLN
                                <div class="text-xs text-gray-500">@customer.Street, @customer.Municipality</div>
                            </td>
                            <td class="px-4 py-3">@customer.TelephoneNo</td>
                            <td class="px-4 py-3">
                                <span class="inline-block px-2 py-1 text-xs rounded-full
                                    @((customer.Loans.Any(l => l.Status == "Active")) ? "bg-green-100 text-green-700" : (customer.Loans.Any() ? "bg-blue-100 text-blue-700" : "bg-gray-100 text-gray-700"))">
                                    @(customer.Loans.Any(l => l.Status == "Active") ? "Active" : (customer.Loans.Any() ? "Inactive" : "No Loans"))
                                </span>
                            </td>
                            <td class="px-4 py-3">@customer.DateAdded.ToString("MMMM dd, yyyy")</td>
                            <td class="px-4 py-3">@customer.Loans.Count</td>
                            <td class="px-4 py-3 text-center relative">
                                <button class="text-gray-700 hover:text-gray-900 focus:outline-none" onclick="toggleMenu('menu-@customer.CustomerID')">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                <div id="menu-@customer.CustomerID" class="hidden absolute right-0 mt-2 w-40 bg-white rounded-lg shadow-lg py-2 z-50">
                                    <a class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 text-left" asp-action="Details" asp-route-id="@customer.CustomerID">
                                        <i class="fas fa-eye mr-2"></i>View
                                    </a>
                                    <a class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 text-left" asp-action="Edit" asp-route-id="@customer.CustomerID">
                                        <i class="fas fa-edit mr-2"></i>Edit
                                    </a>
                                    <button type="button" onclick="showDeleteModalForCustomer(@customer.CustomerID, '@customer.CustomerFN @customer.CustomerLN')" class="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100">
                                        <i class="fas fa-trash-alt mr-2"></i>Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <!-- Pagination -->
        <div class="flex justify-between items-center mt-6">
            <div class="text-sm text-gray-500">Page @(page) of @(totalPages)</div>
            <div class="flex gap-2">
                <a asp-action="Index" asp-route-search="@search" asp-route-sort="@sort" asp-route-page="@(page-1)" class="px-3 py-1 rounded-lg border text-gray-700 hover:bg-gray-100 @(page <= 1 ? "pointer-events-none opacity-50" : "")">Previous</a>
                <a asp-action="Index" asp-route-search="@search" asp-route-sort="@sort" asp-route-page="@(page+1)" class="px-3 py-1 rounded-lg border text-gray-700 hover:bg-gray-100 @(page >= totalPages ? "pointer-events-none opacity-50" : "")">Next</a>
            </div>
        </div>
    </div>
</div>

@await Html.PartialAsync("_DeleteModal")
@section Scripts {
    <script>
        function toggleMenu(menuId) {
            const menu = document.getElementById(menuId);
            const allMenus = document.querySelectorAll('[id^="menu-"]');
            // Close all other menus
            allMenus.forEach(m => {
                if (m.id !== menuId) {
                    m.classList.add('hidden');
                }
            });
            // Toggle the clicked menu
            menu.classList.toggle('hidden');
        }
        // Close menus when clicking outside
        document.addEventListener('click', function(event) {
            const menus = document.querySelectorAll('[id^="menu-"]');
            const isClickInsideMenu = Array.from(menus).some(menu => menu.contains(event.target));
            const isClickOnButton = event.target.closest('button');
            if (!isClickInsideMenu && !isClickOnButton) {
                menus.forEach(menu => menu.classList.add('hidden'));
            }
        });
        function showDeleteModalForCustomer(customerId, customerName) {
            // Set modal message and delete URL
            const modal = document.getElementById('deleteModal');
            modal.querySelector('p').innerText = `Are you sure you want to delete ${customerName}? This action cannot be undone.`;
            const deleteUrl = `/Customer/DeleteConfirmed/${customerId}`;
            modal.querySelector('button[onclick^="confirmDelete"]').setAttribute('onclick', `confirmDelete('${deleteUrl}')`);
            showDeleteModal('deleteModal');
        }
        function confirmDelete(url) {
            // Create and submit a hidden form for POST
            const form = document.createElement('form');
            form.method = 'post';
            form.action = url;
            // Add antiforgery token
            const token = document.querySelector('input[name=__RequestVerificationToken]');
            if (token) {
                const hidden = document.createElement('input');
                hidden.type = 'hidden';
                hidden.name = '__RequestVerificationToken';
                hidden.value = token.value;
                form.appendChild(hidden);
            }
            document.body.appendChild(form);
            form.submit();
        }
        // Debounced auto-submit for search
        let searchTimeout;
        const searchInput = document.getElementById('customerSearchInput');
        if (searchInput) {
            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(function() {
                    document.getElementById('customerSearchForm').submit();
                }, 700); // 700ms debounce
            });
        }
        // Auto-submit on sort and status change
        document.getElementById('sort').addEventListener('change', function() {
            document.getElementById('customerSearchForm').submit();
        });
        document.getElementById('status').addEventListener('change', function() {
            document.getElementById('customerSearchForm').submit();
        });
    </script>
}
