@* Add using for models if needed *@
@using Pawn_Vault___OOP.Models
@{
    ViewData["Title"] = "Add Transaction";
    var customers = ViewBag.Customers as List<Customer>;
    var staffList = ViewBag.StaffList as List<string>; // For handled by
    var generatedReference = ViewBag.GeneratedReference as string; // For reference number
}

<div class="p-5">
    <!-- Header -->
    <div class="flex justify-between items-center mb-5 relative">
        <h2 class="flex items-center text-2xl font-bold">
            <span class="w-1 h-7 bg-[#D4AF37] mr-2"></span>Add New Transaction
        </h2>
    </div>

    <!-- Transaction Form -->
    <div class="bg-white rounded-xl shadow-md p-6">
        <form id="transactionForm" asp-action="AddTransaction" asp-controller="Transaction" method="post" class="space-y-6">
            <!-- Customer and Loan Selection -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label for="customerId" class="block text-sm font-medium text-gray-700 mb-1">Customer</label>
                    <select id="customerId" name="customerId" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#002B5B] focus:border-[#002B5B]">
                        <option value="">Select a customer</option>
                        @if (customers != null)
                        {
                            foreach (var customer in customers)
                            {
                                <option value="@customer.CustomerID">@customer.FullName</option>
                            }
                        }
                    </select>
                </div>
                <div>
                    <label for="loanId" class="block text-sm font-medium text-gray-700 mb-1">Loan</label>
                    <select id="loanId" name="loanId" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#002B5B] focus:border-[#002B5B]">
                        <option value="">Select a loan</option>
                    </select>
                </div>
            </div>

            <!-- Loan Details Box (hidden by default) -->
            <div id="loanDetailsBox" class="mb-4 hidden bg-blue-50 border border-blue-300 rounded-lg p-4 shadow">
                <div class="font-semibold mb-2 text-blue-900 flex items-center">
                    <svg class="w-5 h-5 mr-2 text-blue-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" d="M13 16h-1v-4h-1m1-4h.01M21 12c0 4.97-4.03 9-9 9s-9-4.03-9-9 4.03-9 9-9 9 4.03 9 9z" /></svg>
                    Loan Details
                </div>
                <div id="loanDetailsContent"></div>
            </div>

            <!-- Transaction Details -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label for="transactionType" class="block text-sm font-medium text-gray-700 mb-1">Transaction Type</label>
                    <select id="transactionType" name="transactionType" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#002B5B] focus:border-[#002B5B]">
                        <option value="">Select type</option>
                        <option value="redemption">Redemption</option>
                        <option value="forfeit">Forfeit</option>
                        <option value="renewal">Renewal</option>
                    </select>
                </div>
                <div>
                    <label for="transactionCode" class="block text-sm font-medium text-gray-700 mb-1">Transaction Code</label>
                    <input type="text" id="transactionCode" name="transactionCode" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#002B5B] focus:border-[#002B5B] bg-gray-100" placeholder="Auto-generated" disabled>
                </div>
            </div>

            <!-- Amount, Date, Payment Method -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6" id="amountDatePaymentFields">
                <div>
                    <label for="amount" class="block text-sm font-medium text-gray-700 mb-1">Amount</label>
                    <div class="relative">
                        <span class="absolute left-3 top-2 text-gray-500">$</span>
                        <input type="number" id="amount" name="amount" step="0.01" class="w-full pl-8 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#002B5B] focus:border-[#002B5B]" placeholder="0.00">
                    </div>
                </div>
                <div>
                    <label for="transactionDate" class="block text-sm font-medium text-gray-700 mb-1">Transaction Date</label>
                    <input type="date" id="transactionDate" name="transactionDate" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#002B5B] focus:border-[#002B5B]" value="@DateTime.Now.ToString("yyyy-MM-dd")">
                </div>
                <div>
                    <label for="paymentMethod" class="block text-sm font-medium text-gray-700 mb-1">Payment Method</label>
                    <select id="paymentMethod" name="paymentMethod" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#002B5B] focus:border-[#002B5B]">
                        <option value="">Select method</option>
                        <option value="Cash">Cash</option>
                        <option value="Card">Card</option>
                        <option value="Bank Transfer">Bank Transfer</option>
                        <option value="GCash">GCash</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
            </div>
            <!-- Renewal Due Date (hidden by default) -->
            <div id="renewalDueDateField" class="grid grid-cols-1 md:grid-cols-2 gap-6 hidden">
                <div>
                    <label for="newDueDate" class="block text-sm font-medium text-gray-700 mb-1">New Due Date</label>
                    <input type="date" id="newDueDate" name="newDueDate" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#002B5B] focus:border-[#002B5B]">
                </div>
            </div>

            <!-- Handled By, Reference Number -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <label for="handledBy" class="block text-sm font-medium text-gray-700 mb-1">Handled By</label>
                    <select id="handledBy" name="handledBy" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#002B5B] focus:border-[#002B5B]">
                        <option value="">Select staff</option>
                        @if (staffList != null)
                        {
                            foreach (var staff in staffList)
                            {
                                <option value="@staff">@staff</option>
                            }
                        }
                    </select>
                </div>
                <div>
                    <label for="referenceNumber" class="block text-sm font-medium text-gray-700 mb-1">Reference Number</label>
                    <input type="text" id="referenceNumber" name="referenceNumber" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#002B5B] focus:border-[#002B5B] bg-gray-100" value="@generatedReference" placeholder="Auto-generated" disabled>
                </div>
            </div>

            <!-- Notes -->
            <div>
                <label for="notes" class="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                <textarea id="notes" name="notes" rows="3" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#002B5B] focus:border-[#002B5B]" placeholder="Add any additional notes here..."></textarea>
            </div>

            <!-- Action Buttons -->
            <div class="flex justify-end space-x-4">
                <a href="/Transaction" class="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition">
                    Cancel
                </a>
                <button type="submit" class="px-6 py-2 bg-[#002B5B] text-white rounded-lg hover:bg-[#003c7c] transition">
                    Save Transaction
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        // Dynamically load loans for selected customer
        document.getElementById('customerId').addEventListener('change', function() {
            var customerId = this.value;
            var loanSelect = document.getElementById('loanId');
            loanSelect.innerHTML = '<option value="">Loading...</option>';
            document.getElementById('loanDetailsBox').classList.add('hidden');
            if (customerId) {
                fetch('/Transaction/GetLoansByCustomer?customerId=' + customerId)
                    .then(response => response.json())
                    .then(data => {
                        loanSelect.innerHTML = '<option value="">Select a loan</option>';
                        data.forEach(function(loan) {
                            loanSelect.innerHTML += `<option value="${loan.loanId}">${loan.display}</option>`;
                        });
                    })
                    .catch(() => {
                        loanSelect.innerHTML = '<option value="">No loans found</option>';
                    });
            } else {
                loanSelect.innerHTML = '<option value="">Select a loan</option>';
            }
        });

        // Show loan details when a loan is selected
        document.getElementById('loanId').addEventListener('change', function() {
            var loanId = this.value;
            var box = document.getElementById('loanDetailsBox');
            var content = document.getElementById('loanDetailsContent');
            var transactionCodeInput = document.getElementById('transactionCode');
            if (!loanId) {
                box.classList.add('hidden');
                content.innerHTML = '';
                transactionCodeInput.value = '';
                return;
            }
            fetch('/Transaction/GetLoanDetails?loanId=' + loanId)
                .then(response => response.json())
                .then(data => {
                    if (!data) {
                        box.classList.add('hidden');
                        content.innerHTML = '';
                        transactionCodeInput.value = '';
                        return;
                    }
                    let html = `<div class='grid grid-cols-1 md:grid-cols-2 gap-2'>`;
                    html += `<div><span class='font-semibold text-blue-800'>Item:</span> <span class='text-gray-800'>${data.itemName}</span></div>`;
                    html += `<div><span class='font-semibold text-blue-800'>Due Date:</span> <span class='text-gray-800'>${data.dueDate}</span></div>`;
                    html += `<div><span class='font-semibold text-blue-800'>Principal Amount:</span> <span class='text-gray-800'>₱${data.amount.toFixed(2)}</span></div>`;
                    html += `<div><span class='font-semibold text-blue-800'>Interest Rate:</span> <span class='text-gray-800'>${data.interestRate}%</span></div>`;
                    html += `<div class='md:col-span-2'><span class='font-semibold text-blue-800'>Payment (without interest):</span> <span class='text-gray-800'>₱${data.paymentWithoutInterest.toFixed(2)}</span></div>`;
                    html += `<div class='md:col-span-2'><span class='font-semibold text-blue-800'>Total Payment (with interest):</span> <span class='text-blue-900 font-bold'>₱${data.paymentWithInterest.toFixed(2)}</span></div>`;
                    if (data.isOverdue) {
                        html += `<div class='md:col-span-2 text-red-700'><span class='font-semibold'>Overdue! Additional Interest:</span> ₱${data.overdueInterest.toFixed(2)}</div>`;
                        html += `<div class='md:col-span-2 text-red-800 bg-red-100 rounded px-2 py-1 mt-1'><span class='font-semibold'>Total Payment (with overdue interest):</span> <span class='font-bold'>₱${data.totalDue.toFixed(2)}</span></div>`;
                    }
                    html += `</div>`;
                    content.innerHTML = html;
                    box.classList.remove('hidden');
                    transactionCodeInput.value = data.transactionCode || '';
                });
        });

        // Generate a random reference number on page load
        document.addEventListener('DOMContentLoaded', function() {
            var refInput = document.getElementById('referenceNumber');
            if (refInput && !refInput.value) {
                refInput.value = 'REF-' + Math.random().toString(36).substr(2, 8).toUpperCase();
            }
        });

        // Update fields based on transaction type
        document.getElementById('transactionType').addEventListener('change', function(e) {
            const amountFields = document.getElementById('amountDatePaymentFields');
            const renewalField = document.getElementById('renewalDueDateField');
            if (e.target.value === 'renewal') {
                renewalField.classList.remove('hidden');
                amountFields.classList.remove('hidden');
            } else if (e.target.value === 'redemption' || e.target.value === 'forfeit') {
                renewalField.classList.add('hidden');
                amountFields.classList.remove('hidden');
            } else {
                renewalField.classList.add('hidden');
                amountFields.classList.add('hidden');
            }
            // Update amount placeholder
            const amountInput = document.getElementById('amount');
            switch(e.target.value) {
                case 'redemption':
                    amountInput.placeholder = 'Enter redemption amount';
                    break;
                case 'forfeit':
                    amountInput.placeholder = 'Enter forfeit amount';
                    break;
                case 'renewal':
                    amountInput.placeholder = 'Enter renewal amount';
                    break;
                default:
                    amountInput.placeholder = '0.00';
            }
        });

        // Validation for amount input based on transaction type
        function validateAmount() {
            const type = document.getElementById('transactionType').value;
            const amountInput = document.getElementById('amount');
            const loanId = document.getElementById('loanId').value;
            const errorDiv = document.getElementById('amountError');
            if (!loanId || !type) {
                amountInput.setCustomValidity("");
                if (errorDiv) errorDiv.innerText = '';
                return;
            }
            fetch('/Transaction/GetLoanDetails?loanId=' + loanId)
                .then(response => response.json())
                .then(data => {
                    let valid = true;
                    let msg = '';
                    if (type === 'redemption') {
                        const expected = data.paymentWithInterest;
                        if (parseFloat(amountInput.value) !== parseFloat(expected)) {
                            valid = false;
                            msg = `Amount must be exactly ₱${expected.toFixed(2)} (principal + interest)`;
                        }
                    } else if (type === 'renewal') {
                        const expected = data.paymentWithInterest - data.amount;
                        if (parseFloat(amountInput.value) !== parseFloat(expected)) {
                            valid = false;
                            msg = `Amount must be exactly ₱${expected.toFixed(2)} (interest only)`;
                        }
                    } else {
                        amountInput.setCustomValidity("");
                        if (errorDiv) errorDiv.innerText = '';
                        return;
                    }
                    if (!valid) {
                        amountInput.setCustomValidity(msg);
                        if (errorDiv) errorDiv.innerText = msg;
                    } else {
                        amountInput.setCustomValidity("");
                        if (errorDiv) errorDiv.innerText = '';
                    }
                });
        }
        document.getElementById('amount').addEventListener('input', validateAmount);
        document.getElementById('transactionType').addEventListener('change', validateAmount);
        document.getElementById('loanId').addEventListener('change', validateAmount);
        // Add error message display below amount input
        const amountInputDiv = document.getElementById('amount').parentElement;
        if (!document.getElementById('amountError')) {
            const errorDiv = document.createElement('div');
            errorDiv.id = 'amountError';
            errorDiv.className = 'text-red-600 text-sm mt-1';
            amountInputDiv.appendChild(errorDiv);
        }
    </script>
}