@* Loan Management Main Page *@
@using Pawn_Vault___OOP.Data

@{
    ViewData["Title"] = "Loan Management";
}

<div class="h-screen">
    <div class="flex items-center justify-between px-6 py-4">
        <div>
            <h1 class="text-3xl font-bold text-gray-900">Loans</h1>
            <p class="text-gray-500">Manage pawn loans and track payments</p>
        </div>
        <button type="button" onclick="showCustomerTypeModal()" class="flex items-center gap-2 bg-gray-900 hover:bg-gray-800 text-white px-5 py-2 rounded-lg text-sm font-semibold shadow transition">
            <span class="text-xl leading-none">+</span> New Loan
        </button>
    </div>

    <div class="bg-white rounded-2xl shadow p-8 min-h-[60vh] flex flex-col justify-between">
        <div>
            <h2 class="text-2xl font-semibold text-gray-900 mb-1">Loan Overview</h2>
            <p class="text-gray-500 mb-6">Filter and search through all loans</p>
            
            <form method="get" class="bg-white rounded-xl shadow p-6 mb-8 flex flex-col md:flex-row md:items-end gap-4" id="loanSearchForm">
                <div class="flex-1 relative">
                    <input type="text" name="searchString" value="@ViewBag.CurrentFilter" placeholder="Search loans..." class="w-full border border-gray-300 rounded-lg py-2 pl-10 pr-4 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500" id="loanSearchInput" autocomplete="off" />
                    <svg class="absolute left-3 top-2.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><circle cx="11" cy="11" r="8" /><path d="M21 21l-4.35-4.35" /></svg>
                </div>
                <div>
                    <label class="block text-xs text-gray-500 mb-1" for="sort">Sort</label>
                    <select name="sort" id="sort" class="border border-gray-300 rounded-lg py-2 px-4 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500">
                        @{
                            var sortVal = (ViewBag.Sort as string ?? "az").ToLower();
                        }
                        <option value="az" selected="@(sortVal == "az" ? "selected" : null)">A - Z</option>
                        <option value="za" selected="@(sortVal == "za" ? "selected" : null)">Z - A</option>
                    </select>
                </div>
                <div>
                    <label class="block text-xs text-gray-500 mb-1" for="status">Status</label>
                    <select name="status" id="status" class="border border-gray-300 rounded-lg py-2 px-4 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500">
                        @{
                            var statusVal = (ViewBag.Status as string ?? "");
                        }
                        <option value="" selected="@(string.IsNullOrEmpty(statusVal) ? "selected" : null)">All Status</option>
                        <option value="Active" selected="@(statusVal == "Active" ? "selected" : null)">Active</option>
                        <option value="Overdue" selected="@(statusVal == "Overdue" ? "selected" : null)">Overdue</option>
                        <option value="Paid" selected="@(statusVal == "Paid" ? "selected" : null)">Paid</option>
                    </select>
                </div>
            </form>

            <div class="flex-1">
                <div class="mb-2 text-sm text-gray-500">@Model.Count loan@(Model.Count == 1 ? "" : "s") found</div>
                <table class="min-w-full bg-white rounded-lg w-full">
                    <thead>
                        <tr class="text-gray-500 text-sm">
                            <th class="px-6 py-3 text-left font-medium">Loan ID</th>
                            <th class="px-6 py-3 text-left font-medium">Customer</th>
                            <th class="px-6 py-3 text-left font-medium">Item</th>
                            <th class="px-6 py-3 text-left font-medium">Amount</th>
                            <th class="px-6 py-3 text-left font-medium">Interest Rate</th>
                            <th class="px-6 py-3 text-left font-medium">Due Date</th>
                            <th class="px-6 py-3 text-left font-medium">Status</th>
                            <th class="px-6 py-3 text-left font-medium">Actions</th>
                        </tr>
                    </thead>
                    <tbody class="text-gray-900 text-sm">
                        @foreach (var loan in Model)
                        {
                            <tr>
                                <td class="px-6 py-4">@loan.LoanID</td>
                                <td class="px-6 py-4">@($"{loan.Customer?.CustomerFN} {loan.Customer?.CustomerLN}")</td>
                                <td class="px-6 py-4">@loan.ItemName</td>
                                <td class="px-6 py-4">$@loan.Amount.ToString("N0")</td>
                                <td class="px-6 py-4">@loan.InterestRate.ToString("N2")%</td>
                                <td class="px-6 py-4 flex items-center gap-2">
                                    <svg class="w-4 h-4 text-gray-400 inline-block" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><rect x="3" y="4" width="18" height="18" rx="2"/><path d="M16 2v4M8 2v4M3 10h18"/></svg>
                                    @loan.DueDate.ToString("MMMM dd, yyyy")
                                </td>
                                <!-- conditional placing of status design -->
                                <td class="px-6 py-4">
                                    @if (loan.Status == "Active")
                                    {
                                        <span class="bg-green-100 text-green-700 px-3 py-1 rounded-full text-xs font-semibold">Active</span>
                                    }
                                    else if (loan.Status == "Overdue")
                                    {
                                        <span class="bg-red-100 text-red-600 px-3 py-1 rounded-full text-xs font-semibold">Overdue</span>
                                    }
                                    else
                                    {
                                        <span class="bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-xs font-semibold">Paid</span>
                                    }
                                </td>

                                <td class="px-6 py-4 text-center relative">
                                    <button class="text-gray-700 hover:text-gray-900 focus:outline-none" onclick="toggleMenu('menu-@loan.LoanID')">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <div id="menu-@loan.LoanID" class="hidden absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg py-2 z-50">
                                        <a class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 text-left" asp-action="ViewLoan" asp-route-loanId="@loan.LoanID">
                                            <i class="fas fa-eye mr-2"></i>View
                                        </a>
                                        <a class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 text-left" asp-action="Edit" asp-route-id="@loan.LoanID">
                                            <i class="fas fa-edit mr-2"></i>Edit
                                        </a>
                                        <button onclick="deleteLoan('@loan.LoanID')" class="block w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-100">
                                            <i class="fas fa-trash-alt mr-2"></i>Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Pagination -->
        <div class="flex justify-between items-center mt-6">
            <div class="text-sm text-gray-500">Page @(ViewBag.CurrentPage ?? 1) of @(ViewBag.PageCount ?? 1)</div>
            <div class="flex gap-2">
                <a asp-action="Index" asp-route-pageNumber="@((ViewBag.CurrentPage ?? 1) - 1)" asp-route-searchString="@ViewBag.CurrentFilter" asp-route-sort="@ViewBag.Sort" asp-route-status="@ViewBag.Status"
                   class="px-3 py-1 rounded-lg border text-gray-700 hover:bg-gray-100 @((ViewBag.CurrentPage <= 1) ? "pointer-events-none opacity-50" : "")">Previous</a>
                <a asp-action="Index" asp-route-pageNumber="@((ViewBag.CurrentPage ?? 1) + 1)" asp-route-searchString="@ViewBag.CurrentFilter" asp-route-sort="@ViewBag.Sort" asp-route-status="@ViewBag.Status"
                   class="px-3 py-1 rounded-lg border text-gray-700 hover:bg-gray-100 @((ViewBag.CurrentPage >= ViewBag.PageCount) ? "pointer-events-none opacity-50" : "")">Next</a>
            </div>
        </div>
    </div>
</div>

<!-- Customer Type Modal -->
<div id="customerTypeModal" class="fixed inset-0 backdrop-blur-sm bg-gray-900/30 hidden overflow-y-auto h-full w-full z-50" onclick="handleModalClick(event, 'customerTypeModal')">
    <div class="relative top-20 mx-auto p-6 w-96 shadow-2xl rounded-xl bg-white transform transition-all scale-95">
        <h3 class="text-xl font-semibold text-gray-900 mb-4">Create New Loan</h3>
        <p class="text-gray-600 mb-6">Choose how you want to proceed</p>
        
        <div class="space-y-3">
            <button onclick="proceedToCreate('new')" 
                    class="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-lg font-medium transition-colors">
                New Customer
            </button>
            
            <button onclick="proceedToCreate('existing')" 
                    class="w-full bg-green-600 hover:bg-green-700 text-white py-3 px-4 rounded-lg font-medium transition-colors">
                Existing Customer
            </button>
        </div>
        
        <div class="text-center mt-6">
            <button onclick="closeCustomerTypeModal()" 
                    class="text-gray-500 hover:text-gray-700 font-medium">
                Cancel
            </button>
        </div>
    </div>
</div>

<!-- Receipt Modal (shows only if TempData["ShowReceipt"] is set) -->
@if (TempData["ShowReceipt"] != null && TempData["ShowReceipt"].ToString() == "True")
{
    <div id="receiptModal" class="fixed inset-0 z-50 flex items-center justify-center backdrop-blur-sm bg-gray-900/30" onclick="closeReceiptModal(event)">
        <div class="bg-white rounded-xl shadow-2xl p-8 max-w-md w-full relative transition-all transform scale-100" style="min-width:320px;" onclick="event.stopPropagation();">
            <h2 class="text-2xl font-bold mb-4 text-center text-yellow-600">Loan Receipt</h2>
            <div class="mb-4 text-gray-700 text-center space-y-1">
                <div><span class="font-semibold">Transaction Code:</span> <span class="text-gray-900">@TempData["Receipt_TransactionCode"]</span></div>
                <div><span class="font-semibold">Customer:</span> <span class="text-gray-900">@TempData["Receipt_Customer"]</span></div>
                <div><span class="font-semibold">Item:</span> <span class="text-gray-900">@TempData["Receipt_ItemName"]</span></div>
                <div><span class="font-semibold">Amount:</span> <span class="text-gray-900">₱@TempData["Receipt_Amount"]</span></div>
                <div><span class="font-semibold">Due Date:</span> <span class="text-gray-900">@TempData["Receipt_DueDate"]</span></div>
            </div>
            <div class="flex justify-center mt-6">
                <button onclick="closeReceiptModal()" class="px-6 py-2 bg-yellow-500 text-white rounded-lg font-semibold hover:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-yellow-500">Close</button>
            </div>
        </div>
    </div>
}

@{
    ViewData["Message"] = "Are you sure you want to delete this loan? This action cannot be undone.";
    ViewData["DeleteUrl"] = "/LoanManagement/Delete/";
}
@await Html.PartialAsync("_DeleteModal")

@section Scripts {
    <script>
        function toggleMenu(menuId) {
            const menu = document.getElementById(menuId);
            const allMenus = document.querySelectorAll('[id^="menu-"]');
            
            // Close all other menus
            allMenus.forEach(m => {
                if (m.id !== menuId) {
                    m.classList.add('hidden');
                }
            });
            
            // Toggle the clicked menu
            menu.classList.toggle('hidden');
        }

        // Close menus when clicking outside
        document.addEventListener('click', function(event) {
            const menus = document.querySelectorAll('[id^="menu-"]');
            const isClickInsideMenu = Array.from(menus).some(menu => menu.contains(event.target));
            const isClickOnButton = event.target.closest('button');
            
            if (!isClickInsideMenu && !isClickOnButton) {
                menus.forEach(menu => menu.classList.add('hidden'));
            }
        });

        function deleteLoan(loanId) {
            const deleteUrl = `/LoanManagement/Delete/${loanId}`;
            document.querySelector('#deleteModal button[onclick^="confirmDelete"]').setAttribute('onclick', `confirmDelete('${deleteUrl}')`);
            showDeleteModal('deleteModal');
        }

        function showCustomerTypeModal() {
            const modal = document.getElementById('customerTypeModal');
            modal.classList.remove('hidden');
            // Add a small delay before adding the transform class for animation
            setTimeout(() => {
                modal.querySelector('.transform').classList.add('scale-100');
                modal.querySelector('.transform').classList.remove('scale-95');
            }, 10);
        }
        
        function closeCustomerTypeModal() {
            const modal = document.getElementById('customerTypeModal');
            const modalContent = modal.querySelector('.transform');
            modalContent.classList.add('scale-95');
            modalContent.classList.remove('scale-100');
            // Wait for the animation to complete before hiding
            setTimeout(() => {
                modal.classList.add('hidden');
            }, 150);
        }
        
        function handleModalClick(event, modalId) {
            // Check if the click was on the backdrop (the outer div)
            if (event.target.id === modalId) {
                closeCustomerTypeModal();
            }
        }
        
        function proceedToCreate(type) {
            if (type === 'new') {
                // Redirect to customer registration
                window.location.href = '/Customer/Create?redirectToLoan=true';
            } else {
                // Redirect to loan creation with existing customer
                window.location.href = '/LoanManagement/Create?customerType=existing';
            }
        }

        // Debounced auto-submit for search (copied from customer table)
        let searchTimeout;
        const searchInput = document.getElementById('loanSearchInput');
        if (searchInput) {
            searchInput.addEventListener('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(function() {
                    document.getElementById('loanSearchForm').submit();
                }, 700); // 700ms debounce
            });
        }
        // Auto-submit on filter change
        document.getElementById('sort').addEventListener('change', function() {
            document.getElementById('loanSearchForm').submit();
        });
        document.getElementById('status').addEventListener('change', function() {
            document.getElementById('loanSearchForm').submit();
        });

        function closeReceiptModal(event) {
            if (!event || event.target === document.getElementById('receiptModal')) {
                document.getElementById('receiptModal').style.display = 'none';
            }
        }
        // Auto-show modal if present
        window.onload = function() {
            var modal = document.getElementById('receiptModal');
            if (modal) modal.style.display = 'flex';
        };
    </script>
}